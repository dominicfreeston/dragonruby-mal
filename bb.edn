{:tasks
 
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])
  
  test
  {:task (shell "./dragonruby mal --test mal/test/test.rb")}

  test-step
  {:depends [-get-steps]
   :task (shell (str "./dragonruby mal --test mal/test/cases/"
                     (nth -get-steps (parse-long (first *command-line-args*))) ".rb"))}

  run
  {:requires ([clojure.string :as str])
   :task (shell (str "./dragonruby mal --eval mal/mal.rb --no-tick --run " (str/join " " *command-line-args*)))}
  
  repl
  {:task (shell "rlwrap ./dragonruby mal --eval mal/mal.rb --no-tick")}

  build
  {:depends [-get-steps]
   :task (let [repl-file (nth -get-steps (parse-long (first *command-line-args*)))
               files ["reader" "printer" "types" "env" "core" repl-file]]
           (fs/delete-if-exists "lib/mal.rb")
           (when (not (fs/exists? "lib"))
             (fs/create-dir "lib"))
           (spit "lib/mal.rb"
                 (str/join "\n\n"
                           (map (fn [f]
                                  (slurp (format "mal/%s.rb" f)))
                                files))))}

  install
  {:depends [-get-steps build]
   :task (fs/copy "lib/mal.rb" "mygame/app/mal.rb" {:replace-existing true})}
  
  generate-step-tests
  {:depends [-get-steps]
   :task (doseq [step -get-steps]
           (shell "./dragonruby mal --no-tick --eval mal/test/cases/generate_case.rb --step" step))}

  list-steps {:depends [-get-steps]
              :task (println -get-steps)}
  
  -get-steps
  {:task (->> (fs/list-dir "mal")
              (map (fn [f]
                     (->> f
                         fs/file-name
                         (re-matches (re-pattern "(step.*).rb"))
                         second)))
              (remove nil?)
              sort)}
  }}
