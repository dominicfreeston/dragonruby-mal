{:tasks
 {test
  {:task (shell "./dragonruby mal --test mal/test/test.rb")}

  test-step
  {:depends [-get-steps]
   :task (shell (str "./dragonruby mal --test mal/test/cases/"
                     (nth -get-steps (parse-long (first *command-line-args*))) ".rb"))}

  run
  {:requires ([clojure.string :as str])
   :task (shell (str "./dragonruby mal --eval mal/mal.rb --no-tick --run " (str/join " " *command-line-args*)))}
  
  repl
  {:task (shell "rlwrap ./dragonruby mal --eval mal/mal.rb --no-tick")}
  
  generate-step-tests
  {:depends [-get-steps]
   :task (doseq [step -get-steps]
           (shell "./dragonruby mal --no-tick --eval mal/test/cases/generate_case.rb --step" step))}

  list-steps {:depends [-get-steps]
              :task (println -get-steps)}
  
  -get-steps
  {:requires ([babashka.fs :as fs])
   :task (->> (fs/list-dir "mal")
              (map (fn [f]
                     (->> f
                         fs/file-name
                         (re-matches (re-pattern "(step.*).rb"))
                         second)))
              (remove nil?)
              sort)}
  }}
